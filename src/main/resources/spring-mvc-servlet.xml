<?xml version="1.0" encoding="utf-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans       
	http://www.springframework.org/schema/beans/spring-beans-4.1.xsd        
	http://www.springframework.org/schema/context       
	http://www.springframework.org/schema/context/spring-context-4.1.xsd        
	http://www.springframework.org/schema/mvc       
	http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd 
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd">
	<!-- scan the package and the sub package -->
	<context:component-scan base-package="college" />
	<!-- don't handle the static resource -->
	<mvc:default-servlet-handler />

	<!-- 激活spring的注解. -->
	<context:annotation-config />
	<!-- 配置注解驱动的Spring MVC Controller 的编程模型.注:此标签只在 Servlet MVC工作! -->
	<mvc:annotation-driven />
	<!-- 启用aspectj支持 -->
	<aop:aspectj-autoproxy />


	<mvc:interceptors>
		<!-- 用于避免多次提交 <mvc:mapping path="/**/"/> <bean class = "college.interceptor.TokenInterceptor"/> -->

		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<!-- 需排除拦截的地址 <mvc:exclude-mapping path="/" /> <mvc:exclude-mapping path="/test" 
				/> -->

			<!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 用于得知是那个controller发送过来的 -->
			<bean class="college.interceptor.ControllerTraceInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 前缀 怎么配置多个路径 -->
		<property name="prefix">
			<value>/WEB-INF/</value>
		</property>
		<!-- 后缀 -->
		<property name="suffix">
			<value>.jsp</value>
		</property>
	</bean>

	<!-- kafka -->
	<!--<bean id="producerProperties" class="java.util.HashMap">-->
		<!--<constructor-arg>-->
			<!--<map>-->
				<!--<entry key="bootstrap.servers"-->
					<!--value="192.168.2.3:9092,192.168.2.4:9092,192.168.2.5:9092" />-->
				<!--<entry key="client.id" value="gpmall-sso"></entry>-->
				<!--<entry key="acks" value="-1"></entry>-->
				<!--<entry key="key.serializer"-->
					<!--value="org.apache.kafka.common.serialization.IntegerSerializer"></entry>-->
				<!--<entry key="value.serializer"-->
					<!--value="org.apache.kafka.common.serialization.StringSerializer"></entry>-->
			<!--</map>-->
		<!--</constructor-arg>-->
	<!--</bean>-->

	<!--<bean id="producerFactory"-->
		<!--class="org.springframework.kafka.core.DefaultKafkaProducerFactory">-->
		<!--<constructor-arg ref="producerProperties">-->
		<!--</constructor-arg>-->
	<!--</bean>-->

	<!--<bean id="kafkaTemplate" class="org.springframework.kafka.core.KafkaTemplate">-->
		<!--<constructor-arg ref="producerFactory"></constructor-arg>-->
		<!--<constructor-arg name="autoFlush" value="true" />-->
<!--</bean>-->
	<!-- kafkak 结束 -->
</beans>
